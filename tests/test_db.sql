--
-- PostgreSQL database dump
--

-- Dumped from database version 15.3
-- Dumped by pg_dump version 15.3

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: alembic_version; Type: TABLE; Schema: public; Owner: ts
--

CREATE TABLE public.alembic_version (
    version_num character varying(32) NOT NULL
);


ALTER TABLE public.alembic_version OWNER TO ts;

--
-- Name: ballot; Type: TABLE; Schema: public; Owner: ts
--

CREATE TABLE public.ballot (
    uuid uuid DEFAULT gen_random_uuid() NOT NULL,
    department character varying NOT NULL,
    title character varying,
    created_at timestamp without time zone DEFAULT now() NOT NULL,
    starts_at timestamp without time zone NOT NULL,
    ends_at timestamp without time zone NOT NULL,
    use_yes_no boolean DEFAULT true NOT NULL,
    min_points integer DEFAULT 0 NOT NULL,
    max_points integer DEFAULT 0 NOT NULL,
    unique_points boolean DEFAULT false NOT NULL,
    use_rank boolean DEFAULT false NOT NULL,
    description text
);


ALTER TABLE public.ballot OWNER TO ts;

--
-- Name: ballot_option; Type: TABLE; Schema: public; Owner: ts
--

CREATE TABLE public.ballot_option (
    uuid uuid DEFAULT gen_random_uuid() NOT NULL,
    ballot_uuid uuid NOT NULL,
    title character varying,
    text text NOT NULL
);


ALTER TABLE public.ballot_option OWNER TO ts;

--
-- Name: oauth_token; Type: TABLE; Schema: public; Owner: ts
--

CREATE TABLE public.oauth_token (
    token json,
    provider text,
    created_at timestamp without time zone DEFAULT now() NOT NULL,
    id integer NOT NULL
);


ALTER TABLE public.oauth_token OWNER TO ts;

--
-- Name: option_response; Type: TABLE; Schema: public; Owner: ts
--

CREATE TABLE public.option_response (
    uuid uuid DEFAULT gen_random_uuid() NOT NULL,
    yes_no boolean,
    points integer,
    rank integer,
    option_uuid uuid NOT NULL,
    created_at timestamp without time zone DEFAULT now() NOT NULL,
    confirmed_at timestamp without time zone
);


ALTER TABLE public.option_response OWNER TO ts;

--
-- Name: verification_token; Type: TABLE; Schema: public; Owner: ts
--

CREATE TABLE public.verification_token (
    token uuid DEFAULT gen_random_uuid() NOT NULL,
    response_uuid uuid NOT NULL,
    voter_id integer NOT NULL
);


ALTER TABLE public.verification_token OWNER TO ts;

--
-- Name: voter; Type: TABLE; Schema: public; Owner: ts
--

CREATE TABLE public.voter (
    id integer NOT NULL,
    auid text
);


ALTER TABLE public.voter OWNER TO ts;

--
-- Name: COLUMN voter.auid; Type: COMMENT; Schema: public; Owner: ts
--

COMMENT ON COLUMN public.voter.auid IS 'Application-specific user ID. In OpenID Connect, this is called `sub` (subject identifier) and is generated by the issuer.';


--
-- Name: voter_id_seq; Type: SEQUENCE; Schema: public; Owner: ts
--

ALTER TABLE public.voter ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.voter_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Data for Name: alembic_version; Type: TABLE DATA; Schema: public; Owner: ts
--

COPY public.alembic_version (version_num) FROM stdin;
\.


--
-- Data for Name: ballot; Type: TABLE DATA; Schema: public; Owner: ts
--

COPY public.ballot (uuid, department, title, created_at, starts_at, ends_at, use_yes_no, min_points, max_points, unique_points, use_rank, description) FROM stdin;
\.


--
-- Data for Name: ballot_option; Type: TABLE DATA; Schema: public; Owner: ts
--

COPY public.ballot_option (uuid, ballot_uuid, title, text) FROM stdin;
\.


--
-- Data for Name: oauth_token; Type: TABLE DATA; Schema: public; Owner: ts
--

COPY public.oauth_token (token, provider, created_at, id) FROM stdin;
\.


--
-- Data for Name: option_response; Type: TABLE DATA; Schema: public; Owner: ts
--

COPY public.option_response (uuid, yes_no, points, rank, option_uuid, created_at, confirmed_at) FROM stdin;
\.


--
-- Data for Name: verification_token; Type: TABLE DATA; Schema: public; Owner: ts
--

COPY public.verification_token (token, response_uuid, voter_id) FROM stdin;
\.


--
-- Data for Name: voter; Type: TABLE DATA; Schema: public; Owner: ts
--

COPY public.voter (id, auid) FROM stdin;
\.


--
-- Name: voter_id_seq; Type: SEQUENCE SET; Schema: public; Owner: ts
--

SELECT pg_catalog.setval('public.voter_id_seq', 11, true);


--
-- Name: alembic_version alembic_version_pkc; Type: CONSTRAINT; Schema: public; Owner: ts
--

ALTER TABLE ONLY public.alembic_version
    ADD CONSTRAINT alembic_version_pkc PRIMARY KEY (version_num);


--
-- Name: ballot pk_ballot; Type: CONSTRAINT; Schema: public; Owner: ts
--

ALTER TABLE ONLY public.ballot
    ADD CONSTRAINT pk_ballot PRIMARY KEY (uuid);


--
-- Name: ballot_option pk_ballot_option; Type: CONSTRAINT; Schema: public; Owner: ts
--

ALTER TABLE ONLY public.ballot_option
    ADD CONSTRAINT pk_ballot_option PRIMARY KEY (uuid);


--
-- Name: oauth_token pk_oauth_token; Type: CONSTRAINT; Schema: public; Owner: ts
--

ALTER TABLE ONLY public.oauth_token
    ADD CONSTRAINT pk_oauth_token PRIMARY KEY (id);


--
-- Name: option_response pk_option_response; Type: CONSTRAINT; Schema: public; Owner: ts
--

ALTER TABLE ONLY public.option_response
    ADD CONSTRAINT pk_option_response PRIMARY KEY (uuid);


--
-- Name: verification_token pk_verification_token; Type: CONSTRAINT; Schema: public; Owner: ts
--

ALTER TABLE ONLY public.verification_token
    ADD CONSTRAINT pk_verification_token PRIMARY KEY (token);


--
-- Name: voter pk_voter; Type: CONSTRAINT; Schema: public; Owner: ts
--

ALTER TABLE ONLY public.voter
    ADD CONSTRAINT pk_voter PRIMARY KEY (id);


--
-- Name: voter uq_voter_auid; Type: CONSTRAINT; Schema: public; Owner: ts
--

ALTER TABLE ONLY public.voter
    ADD CONSTRAINT uq_voter_auid UNIQUE (auid);


--
-- Name: ballot_option fk_ballot_option_ballot_uuid_ballot; Type: FK CONSTRAINT; Schema: public; Owner: ts
--

ALTER TABLE ONLY public.ballot_option
    ADD CONSTRAINT fk_ballot_option_ballot_uuid_ballot FOREIGN KEY (ballot_uuid) REFERENCES public.ballot(uuid);


--
-- Name: oauth_token fk_oauth_token_id_voter; Type: FK CONSTRAINT; Schema: public; Owner: ts
--

ALTER TABLE ONLY public.oauth_token
    ADD CONSTRAINT fk_oauth_token_id_voter FOREIGN KEY (id) REFERENCES public.voter(id);


--
-- Name: option_response fk_option_response_option_uuid_ballot_option; Type: FK CONSTRAINT; Schema: public; Owner: ts
--

ALTER TABLE ONLY public.option_response
    ADD CONSTRAINT fk_option_response_option_uuid_ballot_option FOREIGN KEY (option_uuid) REFERENCES public.ballot_option(uuid);


--
-- Name: verification_token fk_verification_token_response_uuid_option_response; Type: FK CONSTRAINT; Schema: public; Owner: ts
--

ALTER TABLE ONLY public.verification_token
    ADD CONSTRAINT fk_verification_token_response_uuid_option_response FOREIGN KEY (response_uuid) REFERENCES public.option_response(uuid);


--
-- Name: verification_token fk_verification_token_voter_id_voter; Type: FK CONSTRAINT; Schema: public; Owner: ts
--

ALTER TABLE ONLY public.verification_token
    ADD CONSTRAINT fk_verification_token_voter_id_voter FOREIGN KEY (voter_id) REFERENCES public.voter(id);


--
-- PostgreSQL database dump complete
--

